apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-dp
  namespace: redis
spec:
  selector:
    matchLabels:
      app: demo-app-dp
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  replicas: 3
  template:
    metadata:
      labels:
        app: demo-app-dp
    spec:
      containers:
      - name: demo-app
        image: icn.ocir.io/oraclepartnersas/baineng-oke-registry:demo-app.v6
        imagePullPolicy: IfNotPresent #Always（默认值）、IfNotPresent、Never
        ports:
        - name: demo-port
          containerPort: 8000
          protocol: TCP
        #command: ["/bin/sh", "-c", "env"]
        env:
            - name: DATABASE_PASSWORD  # 传入pod中的变量名
            #设置 secret mysql用户的密码
              valueFrom:
                secretKeyRef:
                  name: mysql-secret    # secret 中的 name
                  key: password          # configmap 中的 key
            - name: REDIS_PASSWORD     # 传入pod中的变量名
              #设置 secret redis用户的密码
              valueFrom:
                secretKeyRef:
                  name: redis-secret    # secret 中的 name 
                  key: password          # configmap 中的 key
        startupProbe:
          httpGet:
            path: /
            port: demo-port
          failureThreshold: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: demo-port
          failureThreshold: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: demo-port
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          limits:
            cpu: 1000m
            memory: 500Mi
          requests:
            cpu: 500m
            memory: 200Mi 
        volumeMounts:
          - name: config
            mountPath: /app/config/config.yaml
            subPath: config.yaml
            readOnly: true
      imagePullSecrets:
        - name: ocirsecret     #ocirsecret
      volumes:
        - name: config
          configMap:
            name: demo-config # 指定我们创建的configMap的名字
---
apiVersion: v1
kind: Service
metadata:
  name: demo-app-svc
  labels:
    app: demo-app-svc
  namespace: redis
spec:
  type: ClusterIP
  ports:
  - port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: demo-redis-dp
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
  labels:
    app.kubernetes.io/instance: demo-app-dp
  name: demo-app-ingress
  namespace: redis
spec:
  tls:
  - secretName: tls-secret
  rules:
  - host: demo-app.demo.com
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
                name: demo-app-svc
                port:
                  number: 8000
